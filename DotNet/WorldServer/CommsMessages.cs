// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CommsMessages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class CommsMessages {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Message__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Message, global::CommsMessages.Message.Builder> internal__static_CommsMessages_Message__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Ping__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Ping, global::CommsMessages.Ping.Builder> internal__static_CommsMessages_Ping__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Pong__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Pong, global::CommsMessages.Pong.Builder> internal__static_CommsMessages_Pong__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Response__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Response, global::CommsMessages.Response.Builder> internal__static_CommsMessages_Response__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_NewUser__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.NewUser, global::CommsMessages.NewUser.Builder> internal__static_CommsMessages_NewUser__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Login__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Login, global::CommsMessages.Login.Builder> internal__static_CommsMessages_Login__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Say__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Say, global::CommsMessages.Say.Builder> internal__static_CommsMessages_Say__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_MapRequestUpdates__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapRequestUpdates, global::CommsMessages.MapRequestUpdates.Builder> internal__static_CommsMessages_MapRequestUpdates__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_MapIgnoreUpdates__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapIgnoreUpdates, global::CommsMessages.MapIgnoreUpdates.Builder> internal__static_CommsMessages_MapIgnoreUpdates__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CommsMessages_Map__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Map, global::CommsMessages.Map.Builder> internal__static_CommsMessages_Map__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static CommsMessages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChNDb21tc01lc3NhZ2VzLnByb3RvEg1Db21tc01lc3NhZ2VzIscDCgdNZXNz" + 
          "YWdlEicKB21zZ3R5cGUYASACKA4yFi5Db21tc01lc3NhZ2VzLk1zZ1R5cGUS" + 
          "DAoEZnJvbRgCIAIoCRIMCgRkZXN0GAMgAigJEikKCHJlc3BvbnNlGAQgASgL" + 
          "MhcuQ29tbXNNZXNzYWdlcy5SZXNwb25zZRIhCgRwaW5nGAUgASgLMhMuQ29t" + 
          "bXNNZXNzYWdlcy5QaW5nEiEKBHBvbmcYBiABKAsyEy5Db21tc01lc3NhZ2Vz" + 
          "LlBvbmcSJwoHbmV3VXNlchgHIAEoCzIWLkNvbW1zTWVzc2FnZXMuTmV3VXNl" + 
          "chIjCgVsb2dpbhgIIAEoCzIULkNvbW1zTWVzc2FnZXMuTG9naW4SHwoDc2F5" + 
          "GAkgASgLMhIuQ29tbXNNZXNzYWdlcy5TYXkSOwoRbWFwUmVxdWVzdFVwZGF0" + 
          "ZXMYCiABKAsyIC5Db21tc01lc3NhZ2VzLk1hcFJlcXVlc3RVcGRhdGVzEjkK" + 
          "EG1hcElnbm9yZVVwZGF0ZXMYCyABKAsyHy5Db21tc01lc3NhZ2VzLk1hcEln" + 
          "bm9yZVVwZGF0ZXMSHwoDbWFwGAwgASgLMhIuQ29tbXNNZXNzYWdlcy5NYXAi" + 
          "FQoEUGluZxINCgVjb3VudBgBIAIoBSIVCgRQb25nEg0KBWNvdW50GAEgAigF" + 
          "IikKCFJlc3BvbnNlEgwKBGNvZGUYASACKAUSDwoHbWVzc2FnZRgCIAEoCSI7" + 
          "CgdOZXdVc2VyEhAKCHVzZXJuYW1lGAEgAigJEhAKCHBhc3N3b3JkGAIgAigJ" + 
          "EgwKBG5hbWUYAyACKAkiKwoFTG9naW4SEAoIdXNlcm5hbWUYASACKAkSEAoI" + 
          "cGFzc3dvcmQYAiACKAkiEwoDU2F5EgwKBHRleHQYASACKAkiLwoRTWFwUmVx" + 
          "dWVzdFVwZGF0ZXMSDAoEbWFwWBgBIAIoBRIMCgRtYXBZGAIgAigFIi4KEE1h" + 
          "cElnbm9yZVVwZGF0ZXMSDAoEbWFwWBgBIAIoBRIMCgRtYXBZGAIgAigFIjMK" + 
          "A01hcBIMCgRtYXBYGAEgAigFEgwKBG1hcFkYAiACKAUSEAoIZGF0YVNpemUY" + 
          "AyACKAUqiwEKB01zZ1R5cGUSDQoJZVJlc3BvbnNlEAESCQoFZVBpbmcQAhIJ" + 
          "CgVlUG9uZxADEgwKCGVOZXdVc2VyEAQSCgoGZUxvZ2luEAUSCAoEZVNheRAG" + 
          "EhYKEmVNYXBSZXF1ZXN0VXBkYXRlcxAHEhUKEWVNYXBJZ25vcmVVcGRhdGVz" + 
          "EAgSCAoEZU1hcBAJQgJIAQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_CommsMessages_Message__Descriptor = Descriptor.MessageTypes[0];
        internal__static_CommsMessages_Message__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Message, global::CommsMessages.Message.Builder>(internal__static_CommsMessages_Message__Descriptor,
                new string[] { "Msgtype", "From", "Dest", "Response", "Ping", "Pong", "NewUser", "Login", "Say", "MapRequestUpdates", "MapIgnoreUpdates", "Map", });
        internal__static_CommsMessages_Ping__Descriptor = Descriptor.MessageTypes[1];
        internal__static_CommsMessages_Ping__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Ping, global::CommsMessages.Ping.Builder>(internal__static_CommsMessages_Ping__Descriptor,
                new string[] { "Count", });
        internal__static_CommsMessages_Pong__Descriptor = Descriptor.MessageTypes[2];
        internal__static_CommsMessages_Pong__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Pong, global::CommsMessages.Pong.Builder>(internal__static_CommsMessages_Pong__Descriptor,
                new string[] { "Count", });
        internal__static_CommsMessages_Response__Descriptor = Descriptor.MessageTypes[3];
        internal__static_CommsMessages_Response__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Response, global::CommsMessages.Response.Builder>(internal__static_CommsMessages_Response__Descriptor,
                new string[] { "Code", "Message", });
        internal__static_CommsMessages_NewUser__Descriptor = Descriptor.MessageTypes[4];
        internal__static_CommsMessages_NewUser__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.NewUser, global::CommsMessages.NewUser.Builder>(internal__static_CommsMessages_NewUser__Descriptor,
                new string[] { "Username", "Password", "Name", });
        internal__static_CommsMessages_Login__Descriptor = Descriptor.MessageTypes[5];
        internal__static_CommsMessages_Login__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Login, global::CommsMessages.Login.Builder>(internal__static_CommsMessages_Login__Descriptor,
                new string[] { "Username", "Password", });
        internal__static_CommsMessages_Say__Descriptor = Descriptor.MessageTypes[6];
        internal__static_CommsMessages_Say__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Say, global::CommsMessages.Say.Builder>(internal__static_CommsMessages_Say__Descriptor,
                new string[] { "Text", });
        internal__static_CommsMessages_MapRequestUpdates__Descriptor = Descriptor.MessageTypes[7];
        internal__static_CommsMessages_MapRequestUpdates__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapRequestUpdates, global::CommsMessages.MapRequestUpdates.Builder>(internal__static_CommsMessages_MapRequestUpdates__Descriptor,
                new string[] { "MapX", "MapY", });
        internal__static_CommsMessages_MapIgnoreUpdates__Descriptor = Descriptor.MessageTypes[8];
        internal__static_CommsMessages_MapIgnoreUpdates__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.MapIgnoreUpdates, global::CommsMessages.MapIgnoreUpdates.Builder>(internal__static_CommsMessages_MapIgnoreUpdates__Descriptor,
                new string[] { "MapX", "MapY", });
        internal__static_CommsMessages_Map__Descriptor = Descriptor.MessageTypes[9];
        internal__static_CommsMessages_Map__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CommsMessages.Map, global::CommsMessages.Map.Builder>(internal__static_CommsMessages_Map__Descriptor,
                new string[] { "MapX", "MapY", "DataSize", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum MsgType {
    eResponse = 1,
    ePing = 2,
    ePong = 3,
    eNewUser = 4,
    eLogin = 5,
    eSay = 6,
    eMapRequestUpdates = 7,
    eMapIgnoreUpdates = 8,
    eMap = 9,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Message : pb::GeneratedMessage<Message, Message.Builder> {
    private Message() { }
    private static readonly Message defaultInstance = new Message().MakeReadOnly();
    private static readonly string[] _messageFieldNames = new string[] { "dest", "from", "login", "map", "mapIgnoreUpdates", "mapRequestUpdates", "msgtype", "newUser", "ping", "pong", "response", "say" };
    private static readonly uint[] _messageFieldTags = new uint[] { 26, 18, 66, 98, 90, 82, 8, 58, 42, 50, 34, 74 };
    public static Message DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Message DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Message ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Message__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Message, Message.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Message__FieldAccessorTable; }
    }
    
    public const int MsgtypeFieldNumber = 1;
    private bool hasMsgtype;
    private global::CommsMessages.MsgType msgtype_ = global::CommsMessages.MsgType.eResponse;
    public bool HasMsgtype {
      get { return hasMsgtype; }
    }
    public global::CommsMessages.MsgType Msgtype {
      get { return msgtype_; }
    }
    
    public const int FromFieldNumber = 2;
    private bool hasFrom;
    private string from_ = "";
    public bool HasFrom {
      get { return hasFrom; }
    }
    public string From {
      get { return from_; }
    }
    
    public const int DestFieldNumber = 3;
    private bool hasDest;
    private string dest_ = "";
    public bool HasDest {
      get { return hasDest; }
    }
    public string Dest {
      get { return dest_; }
    }
    
    public const int ResponseFieldNumber = 4;
    private bool hasResponse;
    private global::CommsMessages.Response response_;
    public bool HasResponse {
      get { return hasResponse; }
    }
    public global::CommsMessages.Response Response {
      get { return response_ ?? global::CommsMessages.Response.DefaultInstance; }
    }
    
    public const int PingFieldNumber = 5;
    private bool hasPing;
    private global::CommsMessages.Ping ping_;
    public bool HasPing {
      get { return hasPing; }
    }
    public global::CommsMessages.Ping Ping {
      get { return ping_ ?? global::CommsMessages.Ping.DefaultInstance; }
    }
    
    public const int PongFieldNumber = 6;
    private bool hasPong;
    private global::CommsMessages.Pong pong_;
    public bool HasPong {
      get { return hasPong; }
    }
    public global::CommsMessages.Pong Pong {
      get { return pong_ ?? global::CommsMessages.Pong.DefaultInstance; }
    }
    
    public const int NewUserFieldNumber = 7;
    private bool hasNewUser;
    private global::CommsMessages.NewUser newUser_;
    public bool HasNewUser {
      get { return hasNewUser; }
    }
    public global::CommsMessages.NewUser NewUser {
      get { return newUser_ ?? global::CommsMessages.NewUser.DefaultInstance; }
    }
    
    public const int LoginFieldNumber = 8;
    private bool hasLogin;
    private global::CommsMessages.Login login_;
    public bool HasLogin {
      get { return hasLogin; }
    }
    public global::CommsMessages.Login Login {
      get { return login_ ?? global::CommsMessages.Login.DefaultInstance; }
    }
    
    public const int SayFieldNumber = 9;
    private bool hasSay;
    private global::CommsMessages.Say say_;
    public bool HasSay {
      get { return hasSay; }
    }
    public global::CommsMessages.Say Say {
      get { return say_ ?? global::CommsMessages.Say.DefaultInstance; }
    }
    
    public const int MapRequestUpdatesFieldNumber = 10;
    private bool hasMapRequestUpdates;
    private global::CommsMessages.MapRequestUpdates mapRequestUpdates_;
    public bool HasMapRequestUpdates {
      get { return hasMapRequestUpdates; }
    }
    public global::CommsMessages.MapRequestUpdates MapRequestUpdates {
      get { return mapRequestUpdates_ ?? global::CommsMessages.MapRequestUpdates.DefaultInstance; }
    }
    
    public const int MapIgnoreUpdatesFieldNumber = 11;
    private bool hasMapIgnoreUpdates;
    private global::CommsMessages.MapIgnoreUpdates mapIgnoreUpdates_;
    public bool HasMapIgnoreUpdates {
      get { return hasMapIgnoreUpdates; }
    }
    public global::CommsMessages.MapIgnoreUpdates MapIgnoreUpdates {
      get { return mapIgnoreUpdates_ ?? global::CommsMessages.MapIgnoreUpdates.DefaultInstance; }
    }
    
    public const int MapFieldNumber = 12;
    private bool hasMap;
    private global::CommsMessages.Map map_;
    public bool HasMap {
      get { return hasMap; }
    }
    public global::CommsMessages.Map Map {
      get { return map_ ?? global::CommsMessages.Map.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMsgtype) return false;
        if (!hasFrom) return false;
        if (!hasDest) return false;
        if (HasResponse) {
          if (!Response.IsInitialized) return false;
        }
        if (HasPing) {
          if (!Ping.IsInitialized) return false;
        }
        if (HasPong) {
          if (!Pong.IsInitialized) return false;
        }
        if (HasNewUser) {
          if (!NewUser.IsInitialized) return false;
        }
        if (HasLogin) {
          if (!Login.IsInitialized) return false;
        }
        if (HasSay) {
          if (!Say.IsInitialized) return false;
        }
        if (HasMapRequestUpdates) {
          if (!MapRequestUpdates.IsInitialized) return false;
        }
        if (HasMapIgnoreUpdates) {
          if (!MapIgnoreUpdates.IsInitialized) return false;
        }
        if (HasMap) {
          if (!Map.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _messageFieldNames;
      if (hasMsgtype) {
        output.WriteEnum(1, field_names[6], (int) Msgtype, Msgtype);
      }
      if (hasFrom) {
        output.WriteString(2, field_names[1], From);
      }
      if (hasDest) {
        output.WriteString(3, field_names[0], Dest);
      }
      if (hasResponse) {
        output.WriteMessage(4, field_names[10], Response);
      }
      if (hasPing) {
        output.WriteMessage(5, field_names[8], Ping);
      }
      if (hasPong) {
        output.WriteMessage(6, field_names[9], Pong);
      }
      if (hasNewUser) {
        output.WriteMessage(7, field_names[7], NewUser);
      }
      if (hasLogin) {
        output.WriteMessage(8, field_names[2], Login);
      }
      if (hasSay) {
        output.WriteMessage(9, field_names[11], Say);
      }
      if (hasMapRequestUpdates) {
        output.WriteMessage(10, field_names[5], MapRequestUpdates);
      }
      if (hasMapIgnoreUpdates) {
        output.WriteMessage(11, field_names[4], MapIgnoreUpdates);
      }
      if (hasMap) {
        output.WriteMessage(12, field_names[3], Map);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMsgtype) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Msgtype);
        }
        if (hasFrom) {
          size += pb::CodedOutputStream.ComputeStringSize(2, From);
        }
        if (hasDest) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Dest);
        }
        if (hasResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Response);
        }
        if (hasPing) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Ping);
        }
        if (hasPong) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Pong);
        }
        if (hasNewUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, NewUser);
        }
        if (hasLogin) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Login);
        }
        if (hasSay) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, Say);
        }
        if (hasMapRequestUpdates) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, MapRequestUpdates);
        }
        if (hasMapIgnoreUpdates) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, MapIgnoreUpdates);
        }
        if (hasMap) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, Map);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Message ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Message ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Message ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Message ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Message MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Message prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Message, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Message cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Message result;
      
      private Message PrepareBuilder() {
        if (resultIsReadOnly) {
          Message original = result;
          result = new Message();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Message MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Message.Descriptor; }
      }
      
      public override Message DefaultInstanceForType {
        get { return global::CommsMessages.Message.DefaultInstance; }
      }
      
      public override Message BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Message) {
          return MergeFrom((Message) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Message other) {
        if (other == global::CommsMessages.Message.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMsgtype) {
          Msgtype = other.Msgtype;
        }
        if (other.HasFrom) {
          From = other.From;
        }
        if (other.HasDest) {
          Dest = other.Dest;
        }
        if (other.HasResponse) {
          MergeResponse(other.Response);
        }
        if (other.HasPing) {
          MergePing(other.Ping);
        }
        if (other.HasPong) {
          MergePong(other.Pong);
        }
        if (other.HasNewUser) {
          MergeNewUser(other.NewUser);
        }
        if (other.HasLogin) {
          MergeLogin(other.Login);
        }
        if (other.HasSay) {
          MergeSay(other.Say);
        }
        if (other.HasMapRequestUpdates) {
          MergeMapRequestUpdates(other.MapRequestUpdates);
        }
        if (other.HasMapIgnoreUpdates) {
          MergeMapIgnoreUpdates(other.MapIgnoreUpdates);
        }
        if (other.HasMap) {
          MergeMap(other.Map);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.msgtype_, out unknown)) {
                result.hasMsgtype = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasFrom = input.ReadString(ref result.from_);
              break;
            }
            case 26: {
              result.hasDest = input.ReadString(ref result.dest_);
              break;
            }
            case 34: {
              global::CommsMessages.Response.Builder subBuilder = global::CommsMessages.Response.CreateBuilder();
              if (result.hasResponse) {
                subBuilder.MergeFrom(Response);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Response = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::CommsMessages.Ping.Builder subBuilder = global::CommsMessages.Ping.CreateBuilder();
              if (result.hasPing) {
                subBuilder.MergeFrom(Ping);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Ping = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::CommsMessages.Pong.Builder subBuilder = global::CommsMessages.Pong.CreateBuilder();
              if (result.hasPong) {
                subBuilder.MergeFrom(Pong);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pong = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::CommsMessages.NewUser.Builder subBuilder = global::CommsMessages.NewUser.CreateBuilder();
              if (result.hasNewUser) {
                subBuilder.MergeFrom(NewUser);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewUser = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::CommsMessages.Login.Builder subBuilder = global::CommsMessages.Login.CreateBuilder();
              if (result.hasLogin) {
                subBuilder.MergeFrom(Login);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Login = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::CommsMessages.Say.Builder subBuilder = global::CommsMessages.Say.CreateBuilder();
              if (result.hasSay) {
                subBuilder.MergeFrom(Say);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Say = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::CommsMessages.MapRequestUpdates.Builder subBuilder = global::CommsMessages.MapRequestUpdates.CreateBuilder();
              if (result.hasMapRequestUpdates) {
                subBuilder.MergeFrom(MapRequestUpdates);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MapRequestUpdates = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::CommsMessages.MapIgnoreUpdates.Builder subBuilder = global::CommsMessages.MapIgnoreUpdates.CreateBuilder();
              if (result.hasMapIgnoreUpdates) {
                subBuilder.MergeFrom(MapIgnoreUpdates);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MapIgnoreUpdates = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::CommsMessages.Map.Builder subBuilder = global::CommsMessages.Map.CreateBuilder();
              if (result.hasMap) {
                subBuilder.MergeFrom(Map);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Map = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMsgtype {
       get { return result.hasMsgtype; }
      }
      public global::CommsMessages.MsgType Msgtype {
        get { return result.Msgtype; }
        set { SetMsgtype(value); }
      }
      public Builder SetMsgtype(global::CommsMessages.MsgType value) {
        PrepareBuilder();
        result.hasMsgtype = true;
        result.msgtype_ = value;
        return this;
      }
      public Builder ClearMsgtype() {
        PrepareBuilder();
        result.hasMsgtype = false;
        result.msgtype_ = global::CommsMessages.MsgType.eResponse;
        return this;
      }
      
      public bool HasFrom {
        get { return result.hasFrom; }
      }
      public string From {
        get { return result.From; }
        set { SetFrom(value); }
      }
      public Builder SetFrom(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFrom = true;
        result.from_ = value;
        return this;
      }
      public Builder ClearFrom() {
        PrepareBuilder();
        result.hasFrom = false;
        result.from_ = "";
        return this;
      }
      
      public bool HasDest {
        get { return result.hasDest; }
      }
      public string Dest {
        get { return result.Dest; }
        set { SetDest(value); }
      }
      public Builder SetDest(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDest = true;
        result.dest_ = value;
        return this;
      }
      public Builder ClearDest() {
        PrepareBuilder();
        result.hasDest = false;
        result.dest_ = "";
        return this;
      }
      
      public bool HasResponse {
       get { return result.hasResponse; }
      }
      public global::CommsMessages.Response Response {
        get { return result.Response; }
        set { SetResponse(value); }
      }
      public Builder SetResponse(global::CommsMessages.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = value;
        return this;
      }
      public Builder SetResponse(global::CommsMessages.Response.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResponse = true;
        result.response_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResponse(global::CommsMessages.Response value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResponse &&
            result.response_ != global::CommsMessages.Response.DefaultInstance) {
            result.response_ = global::CommsMessages.Response.CreateBuilder(result.response_).MergeFrom(value).BuildPartial();
        } else {
          result.response_ = value;
        }
        result.hasResponse = true;
        return this;
      }
      public Builder ClearResponse() {
        PrepareBuilder();
        result.hasResponse = false;
        result.response_ = null;
        return this;
      }
      
      public bool HasPing {
       get { return result.hasPing; }
      }
      public global::CommsMessages.Ping Ping {
        get { return result.Ping; }
        set { SetPing(value); }
      }
      public Builder SetPing(global::CommsMessages.Ping value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPing = true;
        result.ping_ = value;
        return this;
      }
      public Builder SetPing(global::CommsMessages.Ping.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPing = true;
        result.ping_ = builderForValue.Build();
        return this;
      }
      public Builder MergePing(global::CommsMessages.Ping value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPing &&
            result.ping_ != global::CommsMessages.Ping.DefaultInstance) {
            result.ping_ = global::CommsMessages.Ping.CreateBuilder(result.ping_).MergeFrom(value).BuildPartial();
        } else {
          result.ping_ = value;
        }
        result.hasPing = true;
        return this;
      }
      public Builder ClearPing() {
        PrepareBuilder();
        result.hasPing = false;
        result.ping_ = null;
        return this;
      }
      
      public bool HasPong {
       get { return result.hasPong; }
      }
      public global::CommsMessages.Pong Pong {
        get { return result.Pong; }
        set { SetPong(value); }
      }
      public Builder SetPong(global::CommsMessages.Pong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPong = true;
        result.pong_ = value;
        return this;
      }
      public Builder SetPong(global::CommsMessages.Pong.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPong = true;
        result.pong_ = builderForValue.Build();
        return this;
      }
      public Builder MergePong(global::CommsMessages.Pong value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPong &&
            result.pong_ != global::CommsMessages.Pong.DefaultInstance) {
            result.pong_ = global::CommsMessages.Pong.CreateBuilder(result.pong_).MergeFrom(value).BuildPartial();
        } else {
          result.pong_ = value;
        }
        result.hasPong = true;
        return this;
      }
      public Builder ClearPong() {
        PrepareBuilder();
        result.hasPong = false;
        result.pong_ = null;
        return this;
      }
      
      public bool HasNewUser {
       get { return result.hasNewUser; }
      }
      public global::CommsMessages.NewUser NewUser {
        get { return result.NewUser; }
        set { SetNewUser(value); }
      }
      public Builder SetNewUser(global::CommsMessages.NewUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewUser = true;
        result.newUser_ = value;
        return this;
      }
      public Builder SetNewUser(global::CommsMessages.NewUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNewUser = true;
        result.newUser_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewUser(global::CommsMessages.NewUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNewUser &&
            result.newUser_ != global::CommsMessages.NewUser.DefaultInstance) {
            result.newUser_ = global::CommsMessages.NewUser.CreateBuilder(result.newUser_).MergeFrom(value).BuildPartial();
        } else {
          result.newUser_ = value;
        }
        result.hasNewUser = true;
        return this;
      }
      public Builder ClearNewUser() {
        PrepareBuilder();
        result.hasNewUser = false;
        result.newUser_ = null;
        return this;
      }
      
      public bool HasLogin {
       get { return result.hasLogin; }
      }
      public global::CommsMessages.Login Login {
        get { return result.Login; }
        set { SetLogin(value); }
      }
      public Builder SetLogin(global::CommsMessages.Login value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLogin = true;
        result.login_ = value;
        return this;
      }
      public Builder SetLogin(global::CommsMessages.Login.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLogin = true;
        result.login_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLogin(global::CommsMessages.Login value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLogin &&
            result.login_ != global::CommsMessages.Login.DefaultInstance) {
            result.login_ = global::CommsMessages.Login.CreateBuilder(result.login_).MergeFrom(value).BuildPartial();
        } else {
          result.login_ = value;
        }
        result.hasLogin = true;
        return this;
      }
      public Builder ClearLogin() {
        PrepareBuilder();
        result.hasLogin = false;
        result.login_ = null;
        return this;
      }
      
      public bool HasSay {
       get { return result.hasSay; }
      }
      public global::CommsMessages.Say Say {
        get { return result.Say; }
        set { SetSay(value); }
      }
      public Builder SetSay(global::CommsMessages.Say value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSay = true;
        result.say_ = value;
        return this;
      }
      public Builder SetSay(global::CommsMessages.Say.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSay = true;
        result.say_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSay(global::CommsMessages.Say value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSay &&
            result.say_ != global::CommsMessages.Say.DefaultInstance) {
            result.say_ = global::CommsMessages.Say.CreateBuilder(result.say_).MergeFrom(value).BuildPartial();
        } else {
          result.say_ = value;
        }
        result.hasSay = true;
        return this;
      }
      public Builder ClearSay() {
        PrepareBuilder();
        result.hasSay = false;
        result.say_ = null;
        return this;
      }
      
      public bool HasMapRequestUpdates {
       get { return result.hasMapRequestUpdates; }
      }
      public global::CommsMessages.MapRequestUpdates MapRequestUpdates {
        get { return result.MapRequestUpdates; }
        set { SetMapRequestUpdates(value); }
      }
      public Builder SetMapRequestUpdates(global::CommsMessages.MapRequestUpdates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMapRequestUpdates = true;
        result.mapRequestUpdates_ = value;
        return this;
      }
      public Builder SetMapRequestUpdates(global::CommsMessages.MapRequestUpdates.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMapRequestUpdates = true;
        result.mapRequestUpdates_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMapRequestUpdates(global::CommsMessages.MapRequestUpdates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMapRequestUpdates &&
            result.mapRequestUpdates_ != global::CommsMessages.MapRequestUpdates.DefaultInstance) {
            result.mapRequestUpdates_ = global::CommsMessages.MapRequestUpdates.CreateBuilder(result.mapRequestUpdates_).MergeFrom(value).BuildPartial();
        } else {
          result.mapRequestUpdates_ = value;
        }
        result.hasMapRequestUpdates = true;
        return this;
      }
      public Builder ClearMapRequestUpdates() {
        PrepareBuilder();
        result.hasMapRequestUpdates = false;
        result.mapRequestUpdates_ = null;
        return this;
      }
      
      public bool HasMapIgnoreUpdates {
       get { return result.hasMapIgnoreUpdates; }
      }
      public global::CommsMessages.MapIgnoreUpdates MapIgnoreUpdates {
        get { return result.MapIgnoreUpdates; }
        set { SetMapIgnoreUpdates(value); }
      }
      public Builder SetMapIgnoreUpdates(global::CommsMessages.MapIgnoreUpdates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMapIgnoreUpdates = true;
        result.mapIgnoreUpdates_ = value;
        return this;
      }
      public Builder SetMapIgnoreUpdates(global::CommsMessages.MapIgnoreUpdates.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMapIgnoreUpdates = true;
        result.mapIgnoreUpdates_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMapIgnoreUpdates(global::CommsMessages.MapIgnoreUpdates value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMapIgnoreUpdates &&
            result.mapIgnoreUpdates_ != global::CommsMessages.MapIgnoreUpdates.DefaultInstance) {
            result.mapIgnoreUpdates_ = global::CommsMessages.MapIgnoreUpdates.CreateBuilder(result.mapIgnoreUpdates_).MergeFrom(value).BuildPartial();
        } else {
          result.mapIgnoreUpdates_ = value;
        }
        result.hasMapIgnoreUpdates = true;
        return this;
      }
      public Builder ClearMapIgnoreUpdates() {
        PrepareBuilder();
        result.hasMapIgnoreUpdates = false;
        result.mapIgnoreUpdates_ = null;
        return this;
      }
      
      public bool HasMap {
       get { return result.hasMap; }
      }
      public global::CommsMessages.Map Map {
        get { return result.Map; }
        set { SetMap(value); }
      }
      public Builder SetMap(global::CommsMessages.Map value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMap = true;
        result.map_ = value;
        return this;
      }
      public Builder SetMap(global::CommsMessages.Map.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMap = true;
        result.map_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMap(global::CommsMessages.Map value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMap &&
            result.map_ != global::CommsMessages.Map.DefaultInstance) {
            result.map_ = global::CommsMessages.Map.CreateBuilder(result.map_).MergeFrom(value).BuildPartial();
        } else {
          result.map_ = value;
        }
        result.hasMap = true;
        return this;
      }
      public Builder ClearMap() {
        PrepareBuilder();
        result.hasMap = false;
        result.map_ = null;
        return this;
      }
    }
    static Message() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Ping : pb::GeneratedMessage<Ping, Ping.Builder> {
    private Ping() { }
    private static readonly Ping defaultInstance = new Ping().MakeReadOnly();
    private static readonly string[] _pingFieldNames = new string[] { "count" };
    private static readonly uint[] _pingFieldTags = new uint[] { 8 };
    public static Ping DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Ping DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Ping ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Ping__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Ping, Ping.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Ping__FieldAccessorTable; }
    }
    
    public const int CountFieldNumber = 1;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pingFieldNames;
      if (hasCount) {
        output.WriteInt32(1, field_names[0], Count);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Ping ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Ping ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Ping ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Ping ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Ping ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Ping ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Ping ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Ping ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Ping ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Ping ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Ping MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Ping prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Ping, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Ping cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Ping result;
      
      private Ping PrepareBuilder() {
        if (resultIsReadOnly) {
          Ping original = result;
          result = new Ping();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Ping MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Ping.Descriptor; }
      }
      
      public override Ping DefaultInstanceForType {
        get { return global::CommsMessages.Ping.DefaultInstance; }
      }
      
      public override Ping BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Ping) {
          return MergeFrom((Ping) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Ping other) {
        if (other == global::CommsMessages.Ping.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCount) {
          Count = other.Count;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pingFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pingFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
    }
    static Ping() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Pong : pb::GeneratedMessage<Pong, Pong.Builder> {
    private Pong() { }
    private static readonly Pong defaultInstance = new Pong().MakeReadOnly();
    private static readonly string[] _pongFieldNames = new string[] { "count" };
    private static readonly uint[] _pongFieldTags = new uint[] { 8 };
    public static Pong DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Pong DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Pong ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Pong__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Pong, Pong.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Pong__FieldAccessorTable; }
    }
    
    public const int CountFieldNumber = 1;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pongFieldNames;
      if (hasCount) {
        output.WriteInt32(1, field_names[0], Count);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Pong ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Pong ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Pong ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Pong ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Pong ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Pong ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Pong ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Pong ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Pong ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Pong ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Pong MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Pong prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Pong, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Pong cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Pong result;
      
      private Pong PrepareBuilder() {
        if (resultIsReadOnly) {
          Pong original = result;
          result = new Pong();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Pong MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Pong.Descriptor; }
      }
      
      public override Pong DefaultInstanceForType {
        get { return global::CommsMessages.Pong.DefaultInstance; }
      }
      
      public override Pong BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Pong) {
          return MergeFrom((Pong) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Pong other) {
        if (other == global::CommsMessages.Pong.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCount) {
          Count = other.Count;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pongFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pongFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
    }
    static Pong() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::GeneratedMessage<Response, Response.Builder> {
    private Response() { }
    private static readonly Response defaultInstance = new Response().MakeReadOnly();
    private static readonly string[] _responseFieldNames = new string[] { "code", "message" };
    private static readonly uint[] _responseFieldTags = new uint[] { 8, 18 };
    public static Response DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Response ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Response__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Response, Response.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Response__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private int code_;
    public bool HasCode {
      get { return hasCode; }
    }
    public int Code {
      get { return code_; }
    }
    
    public const int MessageFieldNumber = 2;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _responseFieldNames;
      if (hasCode) {
        output.WriteInt32(1, field_names[0], Code);
      }
      if (hasMessage) {
        output.WriteString(2, field_names[1], Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Code);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Message);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Response MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Response prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Response result;
      
      private Response PrepareBuilder() {
        if (resultIsReadOnly) {
          Response original = result;
          result = new Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Response.Descriptor; }
      }
      
      public override Response DefaultInstanceForType {
        get { return global::CommsMessages.Response.DefaultInstance; }
      }
      
      public override Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Response) {
          return MergeFrom((Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Response other) {
        if (other == global::CommsMessages.Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _responseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCode = input.ReadInt32(ref result.code_);
              break;
            }
            case 18: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public int Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(int value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = 0;
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static Response() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewUser : pb::GeneratedMessage<NewUser, NewUser.Builder> {
    private NewUser() { }
    private static readonly NewUser defaultInstance = new NewUser().MakeReadOnly();
    private static readonly string[] _newUserFieldNames = new string[] { "name", "password", "username" };
    private static readonly uint[] _newUserFieldTags = new uint[] { 26, 18, 10 };
    public static NewUser DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewUser DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewUser ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_NewUser__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewUser, NewUser.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_NewUser__FieldAccessorTable; }
    }
    
    public const int UsernameFieldNumber = 1;
    private bool hasUsername;
    private string username_ = "";
    public bool HasUsername {
      get { return hasUsername; }
    }
    public string Username {
      get { return username_; }
    }
    
    public const int PasswordFieldNumber = 2;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public const int NameFieldNumber = 3;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUsername) return false;
        if (!hasPassword) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newUserFieldNames;
      if (hasUsername) {
        output.WriteString(1, field_names[2], Username);
      }
      if (hasPassword) {
        output.WriteString(2, field_names[1], Password);
      }
      if (hasName) {
        output.WriteString(3, field_names[0], Name);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUsername) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Username);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Password);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Name);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewUser ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewUser ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewUser ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewUser ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewUser ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewUser ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewUser ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewUser ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewUser ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewUser ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewUser MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewUser prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewUser, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewUser cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewUser result;
      
      private NewUser PrepareBuilder() {
        if (resultIsReadOnly) {
          NewUser original = result;
          result = new NewUser();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewUser MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.NewUser.Descriptor; }
      }
      
      public override NewUser DefaultInstanceForType {
        get { return global::CommsMessages.NewUser.DefaultInstance; }
      }
      
      public override NewUser BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewUser) {
          return MergeFrom((NewUser) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewUser other) {
        if (other == global::CommsMessages.NewUser.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUsername) {
          Username = other.Username;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newUserFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newUserFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUsername = input.ReadString(ref result.username_);
              break;
            }
            case 18: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
            case 26: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public string Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
    }
    static NewUser() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Login : pb::GeneratedMessage<Login, Login.Builder> {
    private Login() { }
    private static readonly Login defaultInstance = new Login().MakeReadOnly();
    private static readonly string[] _loginFieldNames = new string[] { "password", "username" };
    private static readonly uint[] _loginFieldTags = new uint[] { 18, 10 };
    public static Login DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Login DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Login ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Login__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Login, Login.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Login__FieldAccessorTable; }
    }
    
    public const int UsernameFieldNumber = 1;
    private bool hasUsername;
    private string username_ = "";
    public bool HasUsername {
      get { return hasUsername; }
    }
    public string Username {
      get { return username_; }
    }
    
    public const int PasswordFieldNumber = 2;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUsername) return false;
        if (!hasPassword) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loginFieldNames;
      if (hasUsername) {
        output.WriteString(1, field_names[1], Username);
      }
      if (hasPassword) {
        output.WriteString(2, field_names[0], Password);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUsername) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Username);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Password);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Login ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Login ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Login ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Login ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Login ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Login ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Login ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Login ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Login ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Login ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Login MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Login prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Login, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Login cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Login result;
      
      private Login PrepareBuilder() {
        if (resultIsReadOnly) {
          Login original = result;
          result = new Login();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Login MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Login.Descriptor; }
      }
      
      public override Login DefaultInstanceForType {
        get { return global::CommsMessages.Login.DefaultInstance; }
      }
      
      public override Login BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Login) {
          return MergeFrom((Login) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Login other) {
        if (other == global::CommsMessages.Login.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUsername) {
          Username = other.Username;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUsername = input.ReadString(ref result.username_);
              break;
            }
            case 18: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public string Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
    }
    static Login() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Say : pb::GeneratedMessage<Say, Say.Builder> {
    private Say() { }
    private static readonly Say defaultInstance = new Say().MakeReadOnly();
    private static readonly string[] _sayFieldNames = new string[] { "text" };
    private static readonly uint[] _sayFieldTags = new uint[] { 10 };
    public static Say DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Say DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Say ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Say__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Say, Say.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Say__FieldAccessorTable; }
    }
    
    public const int TextFieldNumber = 1;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasText) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sayFieldNames;
      if (hasText) {
        output.WriteString(1, field_names[0], Text);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasText) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Text);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Say ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Say ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Say ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Say ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Say ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Say ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Say ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Say ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Say ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Say ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Say MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Say prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Say, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Say cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Say result;
      
      private Say PrepareBuilder() {
        if (resultIsReadOnly) {
          Say original = result;
          result = new Say();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Say MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Say.Descriptor; }
      }
      
      public override Say DefaultInstanceForType {
        get { return global::CommsMessages.Say.DefaultInstance; }
      }
      
      public override Say BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Say) {
          return MergeFrom((Say) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Say other) {
        if (other == global::CommsMessages.Say.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasText) {
          Text = other.Text;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sayFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sayFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
    }
    static Say() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapRequestUpdates : pb::GeneratedMessage<MapRequestUpdates, MapRequestUpdates.Builder> {
    private MapRequestUpdates() { }
    private static readonly MapRequestUpdates defaultInstance = new MapRequestUpdates().MakeReadOnly();
    private static readonly string[] _mapRequestUpdatesFieldNames = new string[] { "mapX", "mapY" };
    private static readonly uint[] _mapRequestUpdatesFieldTags = new uint[] { 8, 16 };
    public static MapRequestUpdates DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MapRequestUpdates DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MapRequestUpdates ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapRequestUpdates__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MapRequestUpdates, MapRequestUpdates.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapRequestUpdates__FieldAccessorTable; }
    }
    
    public const int MapXFieldNumber = 1;
    private bool hasMapX;
    private int mapX_;
    public bool HasMapX {
      get { return hasMapX; }
    }
    public int MapX {
      get { return mapX_; }
    }
    
    public const int MapYFieldNumber = 2;
    private bool hasMapY;
    private int mapY_;
    public bool HasMapY {
      get { return hasMapY; }
    }
    public int MapY {
      get { return mapY_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMapX) return false;
        if (!hasMapY) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mapRequestUpdatesFieldNames;
      if (hasMapX) {
        output.WriteInt32(1, field_names[0], MapX);
      }
      if (hasMapY) {
        output.WriteInt32(2, field_names[1], MapY);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMapX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MapX);
        }
        if (hasMapY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MapY);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MapRequestUpdates ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapRequestUpdates ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapRequestUpdates ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapRequestUpdates ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapRequestUpdates ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapRequestUpdates ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MapRequestUpdates ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MapRequestUpdates ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MapRequestUpdates ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapRequestUpdates ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MapRequestUpdates MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MapRequestUpdates prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MapRequestUpdates, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MapRequestUpdates cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MapRequestUpdates result;
      
      private MapRequestUpdates PrepareBuilder() {
        if (resultIsReadOnly) {
          MapRequestUpdates original = result;
          result = new MapRequestUpdates();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MapRequestUpdates MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.MapRequestUpdates.Descriptor; }
      }
      
      public override MapRequestUpdates DefaultInstanceForType {
        get { return global::CommsMessages.MapRequestUpdates.DefaultInstance; }
      }
      
      public override MapRequestUpdates BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MapRequestUpdates) {
          return MergeFrom((MapRequestUpdates) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MapRequestUpdates other) {
        if (other == global::CommsMessages.MapRequestUpdates.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMapX) {
          MapX = other.MapX;
        }
        if (other.HasMapY) {
          MapY = other.MapY;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapRequestUpdatesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapRequestUpdatesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMapX = input.ReadInt32(ref result.mapX_);
              break;
            }
            case 16: {
              result.hasMapY = input.ReadInt32(ref result.mapY_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMapX {
        get { return result.hasMapX; }
      }
      public int MapX {
        get { return result.MapX; }
        set { SetMapX(value); }
      }
      public Builder SetMapX(int value) {
        PrepareBuilder();
        result.hasMapX = true;
        result.mapX_ = value;
        return this;
      }
      public Builder ClearMapX() {
        PrepareBuilder();
        result.hasMapX = false;
        result.mapX_ = 0;
        return this;
      }
      
      public bool HasMapY {
        get { return result.hasMapY; }
      }
      public int MapY {
        get { return result.MapY; }
        set { SetMapY(value); }
      }
      public Builder SetMapY(int value) {
        PrepareBuilder();
        result.hasMapY = true;
        result.mapY_ = value;
        return this;
      }
      public Builder ClearMapY() {
        PrepareBuilder();
        result.hasMapY = false;
        result.mapY_ = 0;
        return this;
      }
    }
    static MapRequestUpdates() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MapIgnoreUpdates : pb::GeneratedMessage<MapIgnoreUpdates, MapIgnoreUpdates.Builder> {
    private MapIgnoreUpdates() { }
    private static readonly MapIgnoreUpdates defaultInstance = new MapIgnoreUpdates().MakeReadOnly();
    private static readonly string[] _mapIgnoreUpdatesFieldNames = new string[] { "mapX", "mapY" };
    private static readonly uint[] _mapIgnoreUpdatesFieldTags = new uint[] { 8, 16 };
    public static MapIgnoreUpdates DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MapIgnoreUpdates DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MapIgnoreUpdates ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapIgnoreUpdates__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MapIgnoreUpdates, MapIgnoreUpdates.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_MapIgnoreUpdates__FieldAccessorTable; }
    }
    
    public const int MapXFieldNumber = 1;
    private bool hasMapX;
    private int mapX_;
    public bool HasMapX {
      get { return hasMapX; }
    }
    public int MapX {
      get { return mapX_; }
    }
    
    public const int MapYFieldNumber = 2;
    private bool hasMapY;
    private int mapY_;
    public bool HasMapY {
      get { return hasMapY; }
    }
    public int MapY {
      get { return mapY_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMapX) return false;
        if (!hasMapY) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mapIgnoreUpdatesFieldNames;
      if (hasMapX) {
        output.WriteInt32(1, field_names[0], MapX);
      }
      if (hasMapY) {
        output.WriteInt32(2, field_names[1], MapY);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMapX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MapX);
        }
        if (hasMapY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MapY);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MapIgnoreUpdates ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapIgnoreUpdates ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapIgnoreUpdates ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MapIgnoreUpdates ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MapIgnoreUpdates ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapIgnoreUpdates ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MapIgnoreUpdates ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MapIgnoreUpdates ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MapIgnoreUpdates ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MapIgnoreUpdates ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MapIgnoreUpdates MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MapIgnoreUpdates prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MapIgnoreUpdates, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MapIgnoreUpdates cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MapIgnoreUpdates result;
      
      private MapIgnoreUpdates PrepareBuilder() {
        if (resultIsReadOnly) {
          MapIgnoreUpdates original = result;
          result = new MapIgnoreUpdates();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MapIgnoreUpdates MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.MapIgnoreUpdates.Descriptor; }
      }
      
      public override MapIgnoreUpdates DefaultInstanceForType {
        get { return global::CommsMessages.MapIgnoreUpdates.DefaultInstance; }
      }
      
      public override MapIgnoreUpdates BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MapIgnoreUpdates) {
          return MergeFrom((MapIgnoreUpdates) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MapIgnoreUpdates other) {
        if (other == global::CommsMessages.MapIgnoreUpdates.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMapX) {
          MapX = other.MapX;
        }
        if (other.HasMapY) {
          MapY = other.MapY;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapIgnoreUpdatesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapIgnoreUpdatesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMapX = input.ReadInt32(ref result.mapX_);
              break;
            }
            case 16: {
              result.hasMapY = input.ReadInt32(ref result.mapY_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMapX {
        get { return result.hasMapX; }
      }
      public int MapX {
        get { return result.MapX; }
        set { SetMapX(value); }
      }
      public Builder SetMapX(int value) {
        PrepareBuilder();
        result.hasMapX = true;
        result.mapX_ = value;
        return this;
      }
      public Builder ClearMapX() {
        PrepareBuilder();
        result.hasMapX = false;
        result.mapX_ = 0;
        return this;
      }
      
      public bool HasMapY {
        get { return result.hasMapY; }
      }
      public int MapY {
        get { return result.MapY; }
        set { SetMapY(value); }
      }
      public Builder SetMapY(int value) {
        PrepareBuilder();
        result.hasMapY = true;
        result.mapY_ = value;
        return this;
      }
      public Builder ClearMapY() {
        PrepareBuilder();
        result.hasMapY = false;
        result.mapY_ = 0;
        return this;
      }
    }
    static MapIgnoreUpdates() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Map : pb::GeneratedMessage<Map, Map.Builder> {
    private Map() { }
    private static readonly Map defaultInstance = new Map().MakeReadOnly();
    private static readonly string[] _mapFieldNames = new string[] { "dataSize", "mapX", "mapY" };
    private static readonly uint[] _mapFieldTags = new uint[] { 24, 8, 16 };
    public static Map DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Map DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Map ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Map__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Map, Map.Builder> InternalFieldAccessors {
      get { return global::CommsMessages.CommsMessages.internal__static_CommsMessages_Map__FieldAccessorTable; }
    }
    
    public const int MapXFieldNumber = 1;
    private bool hasMapX;
    private int mapX_;
    public bool HasMapX {
      get { return hasMapX; }
    }
    public int MapX {
      get { return mapX_; }
    }
    
    public const int MapYFieldNumber = 2;
    private bool hasMapY;
    private int mapY_;
    public bool HasMapY {
      get { return hasMapY; }
    }
    public int MapY {
      get { return mapY_; }
    }
    
    public const int DataSizeFieldNumber = 3;
    private bool hasDataSize;
    private int dataSize_;
    public bool HasDataSize {
      get { return hasDataSize; }
    }
    public int DataSize {
      get { return dataSize_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMapX) return false;
        if (!hasMapY) return false;
        if (!hasDataSize) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mapFieldNames;
      if (hasMapX) {
        output.WriteInt32(1, field_names[1], MapX);
      }
      if (hasMapY) {
        output.WriteInt32(2, field_names[2], MapY);
      }
      if (hasDataSize) {
        output.WriteInt32(3, field_names[0], DataSize);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMapX) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MapX);
        }
        if (hasMapY) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MapY);
        }
        if (hasDataSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, DataSize);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Map ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Map ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Map ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Map ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Map ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Map ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Map ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Map ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Map ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Map ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Map MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Map prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Map, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Map cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Map result;
      
      private Map PrepareBuilder() {
        if (resultIsReadOnly) {
          Map original = result;
          result = new Map();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Map MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CommsMessages.Map.Descriptor; }
      }
      
      public override Map DefaultInstanceForType {
        get { return global::CommsMessages.Map.DefaultInstance; }
      }
      
      public override Map BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Map) {
          return MergeFrom((Map) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Map other) {
        if (other == global::CommsMessages.Map.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMapX) {
          MapX = other.MapX;
        }
        if (other.HasMapY) {
          MapY = other.MapY;
        }
        if (other.HasDataSize) {
          DataSize = other.DataSize;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMapX = input.ReadInt32(ref result.mapX_);
              break;
            }
            case 16: {
              result.hasMapY = input.ReadInt32(ref result.mapY_);
              break;
            }
            case 24: {
              result.hasDataSize = input.ReadInt32(ref result.dataSize_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMapX {
        get { return result.hasMapX; }
      }
      public int MapX {
        get { return result.MapX; }
        set { SetMapX(value); }
      }
      public Builder SetMapX(int value) {
        PrepareBuilder();
        result.hasMapX = true;
        result.mapX_ = value;
        return this;
      }
      public Builder ClearMapX() {
        PrepareBuilder();
        result.hasMapX = false;
        result.mapX_ = 0;
        return this;
      }
      
      public bool HasMapY {
        get { return result.hasMapY; }
      }
      public int MapY {
        get { return result.MapY; }
        set { SetMapY(value); }
      }
      public Builder SetMapY(int value) {
        PrepareBuilder();
        result.hasMapY = true;
        result.mapY_ = value;
        return this;
      }
      public Builder ClearMapY() {
        PrepareBuilder();
        result.hasMapY = false;
        result.mapY_ = 0;
        return this;
      }
      
      public bool HasDataSize {
        get { return result.hasDataSize; }
      }
      public int DataSize {
        get { return result.DataSize; }
        set { SetDataSize(value); }
      }
      public Builder SetDataSize(int value) {
        PrepareBuilder();
        result.hasDataSize = true;
        result.dataSize_ = value;
        return this;
      }
      public Builder ClearDataSize() {
        PrepareBuilder();
        result.hasDataSize = false;
        result.dataSize_ = 0;
        return this;
      }
    }
    static Map() {
      object.ReferenceEquals(global::CommsMessages.CommsMessages.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
